{"version":3,"sources":["components/TodoList/TodoList.jsx","api/helper.js","api/user.js","components/CurrentUser/CurrentUser.jsx","App.jsx","api/todos.js","index.js"],"names":["TodoList","state","inputValue","selectValue","handleChange","event","target","name","value","setState","this","props","todos","getUserId","selectedUserId","filtredTodos","filter","todo","title","includes","completed","className","length","placeholder","onChange","e","map","key","id","type","checked","readOnly","classNames","userId","onClick","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","user","changeCurrentUser","prevProps","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd08c160.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, getUserId, selectedUserId } = this.props;\n    const { inputValue, selectValue } = this.state;\n    const filtredTodos = todos\n      .filter(todo => todo.title.includes(inputValue))\n      .filter((todo) => {\n        if (selectValue === 'Active') {\n          return !todo.completed;\n        }\n\n        if (selectValue === 'Completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>\n          Todos:\n          {filtredTodos.length}\n        </h2>\n\n        <div className=\"TodoList__inputs-container\">\n          <input\n            className=\"TodoList__input\"\n            placeholder=\"Search\"\n            name=\"inputValue\"\n            value={inputValue}\n            onChange={e => this.handleChange(e)}\n          />\n\n          <select\n            className=\"TodoList__input\"\n            value={selectValue}\n            name=\"selectValue\"\n            onChange={e => this.handleChange(e)}\n          >\n            <option>All</option>\n            <option>Active</option>\n            <option>Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          {filtredTodos.length\n            ? (\n              <ul className=\"TodoList__list\">\n                {filtredTodos.map(todo => (\n                  <li\n                    key={todo.id}\n                    className={todo.completed\n                      ? 'TodoList__item TodoList__item--checked'\n                      : 'TodoList__item TodoList__item--unchecked'\n                    }\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        'button',\n                        { 'TodoList__user-button--selected': (\n                          selectedUserId !== todo.userId\n                        ) },\n                      )}\n                      type=\"button\"\n                      onClick={() => getUserId(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <h3>No todos</h3>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst TodoType = {\n  completed: PropTypes.bool || false,\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoType).isRequired,\n  ).isRequired,\n  getUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n","import { request } from './helper';\n\nexport const getUser = id => request(`/users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/user';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.changeCurrentUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.changeCurrentUser();\n    }\n  }\n\n  changeCurrentUser = () => (\n    getUser(this.props.userId)\n      .then(user => (\n        this.setState({ user })\n      ))\n  )\n\n  render() {\n    const { getUserId } = this.props;\n\n    return (\n      <div>\n        {this.state.user\n          ? (\n            <>\n              <div className=\"CurrentUser\">\n                <h2 className=\"CurrentUser__title\">\n                  <span>\n                    Selected user:\n                    {this.state.user.id}\n                  </span>\n                </h2>\n\n                <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n                <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n                <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n\n                <button\n                  type=\"button\"\n                  className=\"CurrentUser__button button\"\n                  onClick={() => getUserId(0)}\n                >\n                  Clear\n                </button>\n              </div>\n            </>\n          ) : (\n            <h3>There is no information about this user</h3>\n          )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  getUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => (\n        this.setState({\n          todos: todos.filter(todo => todo.title && todo.userId),\n        })\n      ));\n  }\n\n  getUserId = userId => (\n    this.setState({\n      selectedUserId: userId,\n    })\n  )\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n            <TodoList\n              todos={todos}\n              getUserId={this.getUserId}\n              selectedUserId={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUserId={this.getUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { request } from './helper';\n\nexport const getTodos = () => request('/todos');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}